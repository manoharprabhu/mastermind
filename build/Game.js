"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const chalk_1=__importDefault(require("chalk")),readline_1=__importDefault(require("readline")),Board_1=__importDefault(require("./Board"));class Game{totalGuesses;readInterface;fourDigitRegex=new RegExp("^[0-9]{4}$");constructor(e){this.totalGuesses=e,this.readInterface=readline_1.default.createInterface({input:process.stdin,output:process.stdout})}async start(){await this.flashScreen(),this.clearScreen(),this.printIntroduction()}printIntroduction(){console.log(chalk_1.default.green(`
 ██████  ██████  ██████  ███████  ██████ ██████   █████   ██████ ██   ██ ███████ ██████  
██      ██    ██ ██   ██ ██      ██      ██   ██ ██   ██ ██      ██  ██  ██      ██   ██ 
██      ██    ██ ██   ██ █████   ██      ██████  ███████ ██      █████   █████   ██████  
██      ██    ██ ██   ██ ██      ██      ██   ██ ██   ██ ██      ██  ██  ██      ██   ██ 
 ██████  ██████  ██████  ███████  ██████ ██   ██ ██   ██  ██████ ██   ██ ███████ ██   ██ 
                                                                                                                                                                   
=========================================================================================
    `)),console.log(chalk_1.default.greenBright("I have locked your phone with a "+chalk_1.default.redBright("4 digit PIN"))),console.log(chalk_1.default.greenBright(`All the digits of the PIN are unique digits from ${chalk_1.default.redBright("0 to 9")}
`)),this.readInterface.question(chalk_1.default.greenBright(`You have ${chalk_1.default.redBright(this.totalGuesses)} tries to guess the correct PIN. Press enter to start.
`),()=>{this.clearScreen(),this.setPINAndStartGame()})}async setPINAndStartGame(){var e=this.generateRandomPIN();const t=new Board_1.default(e);let r=this.totalGuesses;for(;;){if(this.clearScreen(),console.log(t.getBoard()),0===r){this.gameOver(e);break}console.log(chalk_1.default.greenBright(this.totalGuesses-r+1+". Guess the PIN: "));var s=await this.readGuess();if(4===s.length)if(this.fourDigitRegex.test(s)){if(r--,s===e){this.guessSuccess(r);break}t.addGuess(s),t.clearErrors()}else t.addError(chalk_1.default.red("Your guess has to be 4 digits: "+s));else t.addError(chalk_1.default.red("Your guess has to be 4 digits: "+s))}}guessSuccess(e){this.printInBox(chalk_1.default.black.bgGreenBright,`You guessed the PIN correctly in ${this.totalGuesses-e} guesses`),this.exitGame()}gameOver(e){this.printInBox(chalk_1.default.black.bgRedBright,"You failed. The correct PIN was "+chalk_1.default.bold(e),-9),this.exitGame()}printInBox(t,e,r=0){console.log();var s=e.length+5+5+r;for(let e=0;e<1;e++){for(let e=0;e<s;e++)process.stdout.write(t(" "));console.log()}for(let e=0;e<5;e++)process.stdout.write(t(" "));process.stdout.write(t(e));for(let e=0;e<5;e++)process.stdout.write(t(" "));console.log();for(let e=0;e<1;e++){for(let e=0;e<s;e++)process.stdout.write(t(" "));console.log()}console.log()}async flashScreen(){await this.flashColor(chalk_1.default.green.bgGreen,80),await this.flashColor(chalk_1.default.black.bgBlack,80)}async flashColor(s,a){return new Promise(e=>{var t=process.stdout.rows||24,r=process.stdout.columns||80;for(let e=0;e<t*r;e++)process.stdout.write(s(" "));setTimeout(()=>{e()},a)})}readGuess(){return new Promise(t=>{this.readInterface.question(chalk_1.default.green(""),e=>{t(e.trim())})})}exitGame(){this.readInterface.close()}clearScreen(){console.clear()}generateRandomPIN(){let e="";for(;;){if(4===e.length)break;const t=Math.ceil(9*Math.random());-1===e.indexOf(t.toString())&&(e+=t)}return e}}exports.default=Game;